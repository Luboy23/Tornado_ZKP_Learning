// SPDX-License-Identifier: MIT

pragma solidity ^0.8.17;

contract Hasher {

    uint8 nRounds = 10;
    uint256 p = 21888242871839275222246405745257275088548364400416034343698204186575808495617;

    uint256[10] c = [
    0,
    56197349996965722917794284464345868029706507204984139663551107584017756217050,
    23186340927598205864155452604847830020695963927013452973441353519218905912468,
    91955575461240042624201656960424709822986341776786485727605009840795770391599,
    76426741095576825474653116946311097200468484620618340475012108007573216047613,
    78677843538918958886404031483670405503014842870908130523214002116564651197448,
    90449845223914035643627862183861766603822553140389298016261669930290012000030,
    47957586356784037609228808857308587109627631434551643887234644622732636493634,
    49843367271922103057899586986745636846528039255492217740753415640575325579318,
    88427003697368194419950371945298363770325024233228603760452932519164894610120
    ];

    function MiMC5(uint256 x , uint256 k ) public view returns( uint256 h) {
        uint256 lastOutput = x;
        uint256 base;
        uint256 base2;
        uint256 base4;

        for(uint8 i = 0; i < nRounds; i++) {
            base = addmod(lastOutput, k, p);
            base = addmod(base, c[i], p);

            base2 = mulmod(base, base, p);
            base4 = mulmod(base2, base2, p);
            lastOutput = mulmod(base4, base, p);
        }

        h = addmod(lastOutput , k, p);
}
}